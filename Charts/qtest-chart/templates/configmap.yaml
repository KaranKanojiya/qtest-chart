apiVersion: v1
kind: ConfigMap
metadata:
  name: hostname-config
  labels:
    app: postgres
data:
  postgres_host: "{{ .Values.qTestManager.postgres_host }}"
---   
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  labels:
    app: postgres
data:
  postgres_user: "{{ .Values.qTestManager.postgres_user }}"
  postgres_password: "{{ .Values.qTestManager.postgres_password }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: qtest-manager-config
  labels:
    app: qTestManager
data:
  testconductor.environment: "{{ .Values.qTestManager.testConductorEnvironment }}"
  spring.profiles.active: "{{ .Values.qTestManager.springProfilesActive }}"
  client.jdbc.postgres.url: "{{ .Values.qTestManager.clientJdbc.postgresUrl }}"
  client.jdbc.postgres.username: "{{ .Values.qTestManager.clientJdbc.postgresUserName }}"
  client.jdbc.postgres.readonly.url: "{{ .Values.qTestManager.clientJdbc.postgresReadOnlyUrl }}"
  client.jdbc.postgres.readonly.username: "{{ .Values.qTestManager.clientJdbc.postgresReadOnlyUserName }}"
  elasticsearch.init: "{{ .Values.qTestManager.elasticSearch.init }}"
  elasticsearch.disable: "{{ .Values.qTestManager.elasticSearch.disable }}"
  elasticsearch.scheme: "{{ .Values.qTestManager.elasticSearch.scheme }}"
  elasticsearch.host: "{{ .Values.qTestManager.elasticSearch.host }}"
  elasticsearch.port: "{{ .Values.qTestManager.elasticSearch.port }}"
  attachment.folder.path: "{{ .Values.qTestManager.attachmentFolderPath }}"
  search.folder.path: "{{ .Values.qTestManager.searchFolderPath }}"
  license.folder.path: "{{ .Values.qTestManager.licenseFolderPath }}"
  blobStorage.type: "{{ .Values.qTestManager.blobStorage.type }}"
  blobStorage.region: "{{ .Values.qTestManager.blobStorage.region }}"
  blobStorage.sharedBucket: "{{ .Values.qTestManager.blobStorage.sharedBucket }}"
  s3.folder: "{{ .Values.qTestManager.s3.folder }}"
  s3.scan.url: "{{ .Values.qTestManager.s3.scanUrl }}"
  server.app.url: "{{ .Values.qTestManager.serverAppUrl }}"
  serverapp.useSecureCookie: "{{ .Values.qTestManager.serverAppUseSecureCookie }}"
  serverapp.ssl.required: "{{ .Values.qTestManager.serverAppSSLRequired }}"
  base.http.port: "{{ .Values.qTestManager.base.httpPort }}"
  base.https.port: "{{ .Values.qTestManager.base.httpsPort }}"
  preUrl: "{{ .Values.qTestManager.preUrl }}"
  preUrl.https: "{{ .Values.qTestManager.preUrlHttps }}"
  qasymphonyUrlPostfix: "{{ .Values.qTestManager.qasymphonyUrlPostfix }}"
  qas.directory.address: "{{ .Values.qTestManager.qasDirectoryAddress }}"
  qTest.instance: "{{ .Values.qTestManager.qTest.instance }}"
  qTest.app.version: "{{ .Values.qTestManager.qTest.appVersion }}"
  app.name: "{{ .Values.qTestManager.appName }}"
  analytics.url.base: "{{ .Values.qTestManager.analyticsUrlBase }}"
  kafka.bootstrapAddress: "{{ .Values.qTestManager.kafka.bootstrapAddress }}"
  kafka.schemaRegistryUrl: "{{ .Values.qTestManager.kafka.schemaRegistryUrl }}"
  pre.session.url: "{{ .Values.qTestManager.preSessionUrl }}"
  pulse.url.base: "{{ .Values.qTestManager.pulseUrlBase }}"
  insights.url: "{{ .Values.qTestManager.insightsUrl }}"
  launch.url.base: "{{ .Values.qTestManager.launchUrlBase }}"
  notification.url.external: "{{ .Values.qTestManager.notification.urlExternal }}"
  notification.url.ixternal: "{{ .Values.qTestManager.notification.urlInternal }}"
  qtest.servermap.url: "{{ .Values.qTestManager.qTest.serverMapUrl }}"
  report.http.url: "{{ .Values.qTestManager.report.httpUrl }}"
  report.url: "{{ .Values.qTestManager.report.url }}"
  tdm.setting.url: "{{ .Values.qTestManager.tdmSettingUrl }}"
  mail.host: "{{ .Values.qTestManager.mail.host }}"
  mail.port: "{{ .Values.qTestManager.mail.port }}"
  mail.username: "{{ .Values.qTestManager.mail.userName }}"
  mail.protocol: "{{ .Values.qTestManager.mail.protocol }}"
  mail.smtp.auth: "{{ .Values.qTestManager.mail.smtpAuth }}"
  mail.smtp.starttls.enable: "{{ .Values.qTestManager.mail.smtpTls }}"
  supportEmailAddress: "{{ .Values.qTestManager.mail.supportEmailAddress }}"
