apiVersion: v1
kind: ConfigMap
metadata:
  name: qtest-liquibase-config
  labels:
    app: qTestManager
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  client.jdbc.postgres.url: "{{ .Values.qTestManager.client.jdbc.postgresUrl }}"
  client.jdbc.postgres.username: "{{ .Values.qTestManager.client.jdbc.postgresUserName }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: qtest-manager-config
  labels:
    app: qTestManager
data:
  testconductor.environment: "{{ .Values.qTestManager.testConductorEnvironment }}"
  spring.profiles.active: "{{ .Values.qTestManager.springProfilesActive }}"
  client.jdbc.postgres.url: "{{ .Values.qTestManager.client.jdbc.postgresUrl }}"
  client.jdbc.postgres.username: "{{ .Values.qTestManager.client.jdbc.postgresUserName }}"
  client.jdbc.postgres.readonly.url: "{{ .Values.qTestManager.client.jdbc.postgresReadOnlyUrl }}"
  client.jdbc.postgres.readonly.username: "{{ .Values.qTestManager.client.jdbc.postgresReadOnlyUserName }}"  
  client.dbcp.testWhileIdle: "{{ .Values.qTestManager.client.dbcp.testWhileIdle }}"
  client.dbcp.readonly.maxActive: "{{ .Values.qTestManager.client.dbcp.readOnlyMaxActive }}"
  client.dbcp.maxActive: "{{ .Values.qTestManager.client.dbcp.maxActive }}" 
  elasticsearch.init: "{{ .Values.qTestManager.elasticSearch.init }}"
  elasticsearch.disable: "{{ .Values.qTestManager.elasticSearch.disable }}"
  elasticsearch.scheme: "{{ .Values.qTestManager.elasticSearch.scheme }}"
  elasticsearch.host: "{{ .Values.qTestManager.elasticSearch.host }}"
  elasticsearch.port: "{{ .Values.qTestManager.elasticSearch.port }}"  
  elasticsearch.permitted_clients: "{{ .Values.qTestManager.elasticSearch.permittedClients }}"
  elasticsearch.maximum_objects_per_index_request: "{{ .Values.qTestManager.elasticSearch.maxObjPerIndexRequest }}"  
  attachment.folder.path: "{{ .Values.qTestManager.attachmentFolderPath }}"
  search.folder.path: "{{ .Values.qTestManager.searchFolderPath }}"
  blobStorage.region: "{{ .Values.qTestManager.blobStorage.region }}"
  blobStorage.sharedBucket: "{{ .Values.qTestManager.blobStorage.sharedBucket }}"
  s3.folder: "{{ .Values.qTestManager.s3.folder }}"
  s3.scan.url: "{{ .Values.qTestManager.s3.scanUrl }}"
  server.app.url: "{{ .Values.qTestManager.serverAppUrl }}"
  serverapp.useSecureCookie: "{{ .Values.qTestManager.serverAppUseSecureCookie }}"
  serverapp.ssl.required: "{{ .Values.qTestManager.serverAppSSLRequired }}"
  base.http.port: "{{ .Values.qTestManager.base.httpPort }}"
  base.https.port: "{{ .Values.qTestManager.base.httpsPort }}"
  preUrl: "{{ .Values.qTestManager.preUrl }}"
  preUrl.https: "{{ .Values.qTestManager.preUrlHttps }}"
  qasymphonyUrlPostfix: "{{ .Values.qTestManager.qasymphonyUrlPostfix }}"
  qas.directory.address: "{{ .Values.qTestManager.qasDirectoryAddress }}"
  qTest.instance: "{{ .Values.qTestManager.qTest.instance }}"
  qTest.app.version: "{{ .Values.qTestManager.qTest.appVersion }}"
  app.name: "{{ .Values.qTestManager.appName }}"
  analytics.url.base: "{{ .Values.qTestManager.analyticsUrlBase }}"
  kafka.bootstrapAddress: "{{ .Values.qTestManager.kafka.bootstrapAddress }}"
  kafka.schemaRegistryUrl: "{{ .Values.qTestManager.kafka.schemaRegistryUrl }}"
  pre.session.url: "{{ .Values.qTestManager.preSessionUrl }}"
  pulse.url.base: "{{ .Values.qTestManager.pulseUrlBase }}"
  insights.url: "{{ .Values.qTestManager.insightsUrl }}"
  launch.url.base: "{{ .Values.qTestManager.launchUrlBase }}"
  notification.url.external: "{{ .Values.qTestManager.notification.urlExternal }}"
  notification.url.internal: "{{ .Values.qTestManager.notification.urlInternal }}"
  qtest.servermap.url: "{{ .Values.qTestManager.qTest.serverMapUrl }}"
  report.http.url: "{{ .Values.qTestManager.report.httpUrl }}"
  report.url: "{{ .Values.qTestManager.report.url }}"
  tdm.setting.url: "{{ .Values.qTestManager.tdmSettingUrl }}"
  mail.host: "{{ .Values.qTestManager.mail.host }}"
  mail.port: "{{ .Values.qTestManager.mail.port }}"
  mail.username: "{{ .Values.qTestManager.mail.userName }}"
  mail.protocol: "{{ .Values.qTestManager.mail.protocol }}"
  mail.smtp.auth: "{{ .Values.qTestManager.mail.smtpAuth }}"
  mail.smtp.starttls.enable: "{{ .Values.qTestManager.mail.smtpTls }}"  
  mail.block.external: "{{ .Values.qTestManager.mail.blockExternal }}"  
  supportEmailAddress: "{{ .Values.qTestManager.mail.supportEmailAddress }}"
  action.task.executor.poolSize: "{{ .Values.qTestManager.askExecutorPoolSize }}"
  async.thread.number: "{{ .Values.qTestManager.asyncThreadReadNumber }}"  
  async.max.database.cpu: "{{ .Values.qTestManager.asyncMaxDBCpu }}"  
  background.event.api.threshold: "{{ .Values.qTestManager.background.event.api.threshold }}"
  background.event.jira_cloud.threshold: "{{ .Values.qTestManager.background.event.jira.cloudThreshold }}"
  background.event.jira_server.threshold: "{{ .Values.qTestManager.background.event.jira.serverThreshold }}"
  background.event.maxThreshold: "{{ .Values.qTestManager.background.event.maxThreshold }}"
  background.event.old_defect_tracking_systems.threshold: "{{ .Values.qTestManager.background.event.oldDefectThreshold }}"
  background.event.test_execution_api.retry_times: "{{ .Values.qTestManager.background.event.testExecuteApiRetryTimes }}"
  background.event.test_execution_api.threshold: "{{ .Values.qTestManager.background.event.testExecuteApiThreshold }}"
  task.execution.time.upper.threshold: "{{ .Values.qTestManager.taskExecutionTimeUpperThreshold }}"
  request.execution.time.upper.threshold: "{{ .Values.qTestManager.requestExecutionTimeUpperThreshold }}"
  qtest.od.private: "{{ .Values.qTestManager.qtestODPrivate }}"
  plugin.storage.path: "{{ .Values.qTestManager.pluginStoragePath }}"
  analytics.beta.clients: "{{ .Values.qTestManager.analyticsBetaClients }}"
  action.task.executor.poolSize: "{{ .Values.qTestManager.actionTaskExecutorPoolSize }}"
  REGION: "{{ .Values.qTestManager.region }}"
  QTEST_PLUGIN_SERVER: "{{ .Values.qTestManager.qTestPluginServer }}"
  JDBC_CONNECTION_STRING: "{{ .Values.qTestManager.jdbcConnectionString }}"
  ELB_SG: "{{ .Values.qTestManager.elbSG }}"
  ELB_CERTIFICATE: "{{ .Values.qTestManager.elbCertificate }}"
  ELB_BUCKET: "{{ .Values.qTestManager.elbBucket }}"
  AUTO_UPDATE_DATABASE: "{{ .Values.qTestManager.autoUpdateDB }}"
  ACCOUNT_ID: "{{ .Values.qTestManager.accountId }}"

