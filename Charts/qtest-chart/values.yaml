# Default values for qtest-manager-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

rollouts:
  enabled: false

deployments:
  enabled: true

annotations: {}

podAnnotations: {}

env: []

image:
  repository: 242129367204.dkr.ecr.us-east-1.amazonaws.com/qtestmgr
  liquibase: public.ecr.aws/b8y7a2x6/liquibase
  pullPolicy: IfNotPresent
  tag: "10.4.0-203244a"
  liquibasetag: 2
  liquibasepullpolicy: IfNotPresent

imageCredentials:
  enabled: false
  name: ""
  registry: ""
  username: ""
  password: ""
  email: ""

secrets:
  enabled: false
  # existingConfigs: ""
  # existingImageCredentials: ""

service:
  type: LoadBalancer
  port: 8080
  targetport: 8080
  servicename: mgr-service
  # servicePortHttp: 80
  # servicePortHttps: 443
  # servicePortHttpName: http
  # servicePortHttpsName: https

qTestManager:
  postgres_host: ""
  postgres_user: ""
  postgres_password: ""
  testConductorEnvironment: production
  springProfilesActive: postgres,oldTrackingDefect
  client:
    jdbc:
      postgresUrl: ""
      postgresUserName: ""
      postgresPassword: ""
      postgresReadOnlyUrl: ""
      postgresReadOnlyUserName: ""
      postgresReadOnlyPassword: ""
    dbcp:
      testWhileIdle: 1
      readOnlyMaxActive: 100
      maxActive: 150
  elasticSearch:
    init: false
    disable: true
    scheme: http
    host: 127.0.0.1
    port: 9200
    maxObjPerIndexRequest: 10000
    permittedClients: qas
  attachmentFolderPath: /usr/local/tomcat/temp
  searchFolderPath: /usr/local/tomcat/temp
  blobStorage:
    region: us-east-1
    sharedBucket: ""
  s3:
    folder: manager
    scanUrl: http://clamab-service
  serverAppUrl: http://search:8080
  serverAppUseSecureCookie: true
  serverAppSSLRequired: false
  base:
    httpPort: 8080
    httpsPort: 8080
  preUrl: http://127.0.0.1:8080
  preUrlHttps: https://127.0.0.1:8443
  qasymphonyUrlPostfix: .qtest.local
  qasDirectoryAddress: http://localhost:9080/tc-auth
  appName: app
  kafka:
    bootstrapAddress: "[:]"
    schemaRegistryUrl: "[:]"
  analyticsUrlBase: "http://analytics-service"
  preSessionUrl: "http://session-service"
  pulseUrlBase: "http://pulse-service"
  insightsUrl: "http://insights-service"
  launchUrlBase: ""
  notification:
    urlExternal: "http://notification-service"
    urlInternal: "http://notification-service"
  qTest:
    serverMapUrl: ""
    instance: US
    appVersion: production
  report:
    httpUrl: ""
    url: ""
  tdmSettingUrl: "http://parameter-service"
  mail:
    host: ""
    port: 465
    userName: ""
    password: ""
    protocol: smtp
    smtpAuth: true
    smtpTls: false
    supportEmailAddress: qas_devops@tricentis.com
    blockExternal: false
  askExecutorPoolSize: 10
  asyncThreadReadNumber: 30
  asyncMaxDBCpu: 90
  background:
    event:
      api:
        threshold: 10
      jira:
        cloudThreshold: 10
        serverThreshold: 10
      maxThreshold: 2000
      oldDefectThreshold: 20
      testExecuteApiRetryTimes: 1
      testExecuteApiThreshold: 2
  clientDbcpMaxActive: 300
  taskExecutionTimeUpperThreshold: 6000
  requestExecutionTimeUpperThreshold: 1000
  qtestODPrivate: false
  pluginStoragePath: /var/lib/qtest/qtest-plugins
  analyticsBetaClients: ""
  actionTaskExecutorPoolSize: 0
  region: us-east-1
  qTestPluginServer: 0
  jdbcConnectionString: ""
  elbSG: ""
  elbCertificate: ""
  elbBucket: ""
  autoUpdateDB: 1
  accountId: ""

ingress:
  enabled: false
  ingressClassName: ""
  annotations:
    kubernetes.io/ingress.class: ""
  canary:
    annotationPrefix: ""
    annotations: {}
      # canary-by-header: []
      # canary-by-header-pattern: []
  labels: {}
  hosts: []
  paths:
    - /
  extraPaths:
    []
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation
  tls:
    []
    # - secretName: qtest-example-tls
    #   hosts:
    #     - foo.qtest.com
  https: false

# CD Pipeline use only
chaos:
  enabled: false
workflow:
  enabled: false
  annotations: {}
  adminModeNamespace: litmus
  serviceAccountName: ""
  podGC: OnWorkflowSuccess
  postman:
    repo: ""
    image: public.ecr.aws/b8y7a2x6/argo-agent:ubuntu.2

# Metrics for nginx ingress controller for application and cluster analysis
metrics:
  enabled: false
  prometheus:
    address: ""
    query: ""

persistence:
  enabled: true
  annotations: {}

  ## Specify an existing volume claim instead of creating a new one.
  ## When using this option all following options like storageClass, accessMode and size are ignored.
  # existingClaim:

  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ## set, choosing the default provisioner.  (gp2 on AWS, standard on
  ## GKE, AWS & OpenStack)
  ##
  storageClass:
  accessMode: ReadWriteMany
  size: 10Gi

  ## Specify extra volumes. Refer to ".spec.volumes" specification : https://kubernetes.io/fr/docs/concepts/storage/volumes/
  volumes: []
  ## Specify extra mounts. Refer to ".spec.containers.volumeMounts" specification : https://kubernetes.io/fr/docs/concepts/storage/volumes/
  mounts: []

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 3
    memory: 4096Mi
  requests:
    cpu: 1
    memory: 1024Mi

autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 6
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
